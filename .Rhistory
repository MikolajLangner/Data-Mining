ylab("y")
cdf.plot <- ggplot(df) +
stat_ecdf(aes(empirical.norm, color="empiryczne")) +
geom_line(aes(x=points, y=theoretical.cdf, color="teoretyczne"), alpha=0.4) +
ggtitle("Dystrybuanta") +
xlab("x") +
scale_color_manual(values = c(
'empiryczne' = 'darkblue',
'teoretyczne' = 'red')) +
labs(color = 'Dane')
return(grid.arrange(pdf.plot, cdf.plot,
nrow=1,
top=textGrob(sprintf("N = %s", N))))
}
compare.distribution(3)
points <- seq(-4, 4, length.out=5000)
df = data.frame(points = points,
theoretical.pdf = dnorm(points),
theoretical.cdf = pnorm(points))
clt.uniform <- function(N, min = 0, max = 1) {
S <- sum(runif(N, min = min, max = max))
Mean.S <- N * (max - min) / 2
StDev.S <- (max - min) * sqrt(N / 12)
return((S - Mean.S) / StDev.S)
}
clt.uniform <- Vectorize(clt.uniform)
library(ggplot2)
library(gridExtra)
library(grid)
compare.distribution <- function(N) {
df$empirical.norm <- clt.uniform(rep(N, length(points)))
pdf.plot <- ggplot(df) +
geom_density(aes(empirical.norm), color="darkblue") +
geom_line(aes(x=points, y=theoretical.pdf), color="red", alpha=0.4) +
ggtitle("Gęstość") +
xlab("x") +
ylab("y")
cdf.plot <- ggplot(df) +
stat_ecdf(aes(empirical.norm, color="empiryczne")) +
geom_line(aes(x=points, y=theoretical.cdf, color="teoretyczne"), alpha=0.4) +
ggtitle("Dystrybuanta") +
xlab("x") +
scale_color_manual(values = c(
'empiryczne' = 'darkblue',
'teoretyczne' = 'red')) +
labs(color = 'Dane')
return(grid.arrange(pdf.plot, cdf.plot,
nrow=1,
top=textGrob(sprintf("N = %s", N))))
}
compare.distribution(3)
compare.distribution(2)
compare.distribution(20)
compare.distribution(40)
compare.distribution(40)
compare.distribution(100)
compare.distribution(1000)
compare.distribution(1000)
points <- seq(-4, 4, length.out=5000)
df = data.frame(points = points,
theoretical.pdf = dnorm(points),
theoretical.cdf = pnorm(points))
clt.uniform <- function(N, min = 0, max = 1) {
S <- sum(runif(N, min = min, max = max))
Mean.S <- N * (max - min) / 2
StDev.S <- (max - min) * sqrt(N / 12)
return((S - Mean.S) / StDev.S)
}
clt.uniform <- Vectorize(clt.uniform)
library(ggplot2)
library(gridExtra)
library(grid)
compare.distribution <- function(N) {
df$empirical.norm <- clt.uniform(rep(N, length(points)))
pdf.plot <- ggplot(df) +
geom_density(aes(empirical.norm), color="darkblue") +
geom_line(aes(x=points, y=theoretical.pdf), color="red", alpha=0.4) +
ggtitle("Gęstość") +
xlab("x") +
ylab("y")
cdf.plot <- ggplot(df) +
stat_ecdf(aes(empirical.norm, color="empiryczne")) +
geom_line(aes(x=points, y=theoretical.cdf, color="teoretyczne"), alpha=0.4) +
ggtitle("Dystrybuanta") +
xlab("x") +
scale_color_manual(values = c(
'empiryczne' = 'darkblue',
'teoretyczne' = 'red')) +
labs(color = 'Dane')
return(grid.arrange(pdf.plot, cdf.plot,
nrow=1,
top=textGrob(sprintf("N = %s", N))))
}
compare.distribution(1000)
points <- seq(-4, 4, length.out=5000)
df = data.frame(points = points,
theoretical.pdf = dnorm(points),
theoretical.cdf = pnorm(points))
clt.uniform <- function(N, min = 0, max = 1) {
S <- sum(runif(N, min = min, max = max))
Mean.S <- N * (max - min) / 2
StDev.S <- (max - min) * sqrt(N / 12)
return((S - Mean.S) / StDev.S)
}
clt.uniform <- Vectorize(clt.uniform)
library(ggplot2)
library(gridExtra)
library(grid)
compare.distribution <- function(N) {
df$empirical.norm <- clt.uniform(rep(N, length(points)))
pdf.plot <- ggplot(df) +
geom_density(aes(empirical.norm), color="darkblue") +
geom_line(aes(x=points, y=theoretical.pdf), color="red", alpha=0.4) +
ggtitle("Gęstość") +
xlab("x") +
ylab("y")
cdf.plot <- ggplot(df) +
stat_ecdf(aes(empirical.norm, color="empiryczne")) +
geom_line(aes(x=points, y=theoretical.cdf, color="teoretyczne"), alpha=0.4) +
ggtitle("Dystrybuanta") +
xlab("x") +
scale_color_manual(values = c(
'empiryczne' = 'darkblue',
'teoretyczne' = 'red')) +
labs(color = 'Dane')
return(grid.arrange(cdf.plot, pdf.plot,
nrow=1,
top=textGrob(sprintf("N = %s", N))))
}
compare.distribution(1000)
points <- seq(-4, 4, length.out=5000)
df = data.frame(points = points,
theoretical.pdf = dnorm(points),
theoretical.cdf = pnorm(points))
clt.uniform <- function(N, min = 0, max = 1) {
S <- sum(runif(N, min = min, max = max))
Mean.S <- N * (max - min) / 2
StDev.S <- (max - min) * sqrt(N / 12)
return((S - Mean.S) / StDev.S)
}
clt.uniform <- Vectorize(clt.uniform)
library(ggplot2)
library(gridExtra)
library(grid)
compare.distribution <- function(N) {
df$empirical.norm <- clt.uniform(rep(N, length(points)))
pdf.plot <- ggplot(df) +
geom_density(aes(empirical.norm, color="empiryczne")) +
geom_line(aes(x=points, y=theoretical.pdf, color="teoretyczne"), alpha=0.4) +
ggtitle("Gęstość") +
xlab("x") +
ylab("y") +
scale_color_manual(values = c(
'empiryczne' = 'darkblue',
'teoretyczne' = 'red')) +
labs(color = 'Dane')
cdf.plot <- ggplot(df) +
stat_ecdf(aes(empirical.norm), color="darkblue") +
geom_line(aes(x=points, y=theoretical.cdf), color="red", alpha=0.4) +
ggtitle("Dystrybuanta") +
xlab("x")
return(grid.arrange(cdf.plot, pdf.plot,
nrow=1,
top=textGrob(sprintf("N = %s", N))))
}
compare.distribution(1000)
compare.distribution(2)
help(grid.arrange)
points <- seq(-4, 4, length.out=5000)
df = data.frame(points = points,
theoretical.pdf = dnorm(points),
theoretical.cdf = pnorm(points))
clt.uniform <- function(N, min = 0, max = 1) {
S <- sum(runif(N, min = min, max = max))
Mean.S <- N * (max - min) / 2
StDev.S <- (max - min) * sqrt(N / 12)
return((S - Mean.S) / StDev.S)
}
clt.uniform <- Vectorize(clt.uniform)
library(ggplot2)
library(gridExtra)
library(grid)
compare.distribution <- function(N) {
df$empirical.norm <- clt.uniform(rep(N, length(points)))
pdf.plot <- ggplot(df) +
geom_density(aes(empirical.norm, color="empiryczne")) +
geom_line(aes(x=points, y=theoretical.pdf, color="teoretyczne"), alpha=0.4) +
ggtitle("Gęstość") +
xlab("x") +
ylab("y") +
scale_color_manual(values = c(
'empiryczne' = 'darkblue',
'teoretyczne' = 'red')) +
labs(color = 'Dane')
cdf.plot <- ggplot(df) +
stat_ecdf(aes(empirical.norm), color="darkblue") +
geom_line(aes(x=points, y=theoretical.cdf), color="red", alpha=0.4) +
ggtitle("Dystrybuanta") +
xlab("x")
return(grid.arrange(cdf.plot, pdf.plot,
nrow=1,
widths=c(1,2),
top=textGrob(sprintf("N = %s", N))))
}
compare.distribution(2)
points <- seq(-4, 4, length.out=5000)
df = data.frame(points = points,
theoretical.pdf = dnorm(points),
theoretical.cdf = pnorm(points))
clt.uniform <- function(N, min = 0, max = 1) {
S <- sum(runif(N, min = min, max = max))
Mean.S <- N * (max - min) / 2
StDev.S <- (max - min) * sqrt(N / 12)
return((S - Mean.S) / StDev.S)
}
clt.uniform <- Vectorize(clt.uniform)
library(ggplot2)
library(gridExtra)
library(grid)
compare.distribution <- function(N) {
df$empirical.norm <- clt.uniform(rep(N, length(points)))
pdf.plot <- ggplot(df) +
geom_density(aes(empirical.norm, color="empiryczne")) +
geom_line(aes(x=points, y=theoretical.pdf, color="teoretyczne"), alpha=0.4) +
ggtitle("Gęstość") +
xlab("x") +
ylab("y") +
scale_color_manual(values = c(
'empiryczne' = 'darkblue',
'teoretyczne' = 'red')) +
labs(color = 'Dane')
cdf.plot <- ggplot(df) +
stat_ecdf(aes(empirical.norm), color="darkblue") +
geom_line(aes(x=points, y=theoretical.cdf), color="red", alpha=0.4) +
ggtitle("Dystrybuanta") +
xlab("x")
return(grid.arrange(cdf.plot, pdf.plot,
nrow=1,
widths=c(1.5,2),
top=textGrob(sprintf("N = %s", N))))
}
points <- seq(-4, 4, length.out=5000)
df = data.frame(points = points,
theoretical.pdf = dnorm(points),
theoretical.cdf = pnorm(points))
clt.uniform <- function(N, min = 0, max = 1) {
S <- sum(runif(N, min = min, max = max))
Mean.S <- N * (max - min) / 2
StDev.S <- (max - min) * sqrt(N / 12)
return((S - Mean.S) / StDev.S)
}
clt.uniform <- Vectorize(clt.uniform)
library(ggplot2)
library(gridExtra)
library(grid)
compare.distribution <- function(N) {
df$empirical.norm <- clt.uniform(rep(N, length(points)))
pdf.plot <- ggplot(df) +
geom_density(aes(empirical.norm, color="empiryczne")) +
geom_line(aes(x=points, y=theoretical.pdf, color="teoretyczne"), alpha=0.4) +
ggtitle("Gęstość") +
xlab("x") +
ylab("y") +
scale_color_manual(values = c(
'empiryczne' = 'darkblue',
'teoretyczne' = 'red')) +
labs(color = 'Dane')
cdf.plot <- ggplot(df) +
stat_ecdf(aes(empirical.norm), color="darkblue") +
geom_line(aes(x=points, y=theoretical.cdf), color="red", alpha=0.4) +
ggtitle("Dystrybuanta") +
xlab("x")
return(grid.arrange(cdf.plot, pdf.plot,
nrow=1,
widths=c(0.75, 0.25),
top=textGrob(sprintf("N = %s", N))))
}
compare.distribution(2)
points <- seq(-4, 4, length.out=5000)
df = data.frame(points = points,
theoretical.pdf = dnorm(points),
theoretical.cdf = pnorm(points))
clt.uniform <- function(N, min = 0, max = 1) {
S <- sum(runif(N, min = min, max = max))
Mean.S <- N * (max - min) / 2
StDev.S <- (max - min) * sqrt(N / 12)
return((S - Mean.S) / StDev.S)
}
clt.uniform <- Vectorize(clt.uniform)
library(ggplot2)
library(gridExtra)
library(grid)
compare.distribution <- function(N) {
df$empirical.norm <- clt.uniform(rep(N, length(points)))
pdf.plot <- ggplot(df) +
geom_density(aes(empirical.norm, color="empiryczne")) +
geom_line(aes(x=points, y=theoretical.pdf, color="teoretyczne"), alpha=0.4) +
ggtitle("Gęstość") +
xlab("x") +
ylab("y") +
scale_color_manual(values = c(
'empiryczne' = 'darkblue',
'teoretyczne' = 'red')) +
labs(color = 'Dane')
cdf.plot <- ggplot(df) +
stat_ecdf(aes(empirical.norm), color="darkblue") +
geom_line(aes(x=points, y=theoretical.cdf), color="red", alpha=0.4) +
ggtitle("Dystrybuanta") +
xlab("x")
return(grid.arrange(cdf.plot, pdf.plot,
nrow=1,
widths=c(1.5, 2),
top=textGrob(sprintf("N = %s", N))))
}
compare.distribution(2)
\documentclass{article}
\usepackage[OT4]{polski}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[top=2.5cm, bottom=2.5cm, left=2cm, right=2cm]{geometry}
\usepackage{graphicx}
\usepackage{float}
\usepackage[colorlinks=true, linkcolor=blue]{hyperref}
\usepackage{amsmath}
\usepackage{amssymb}
<<Globals, echo=FALSE, warning=FALSE>>=
library(knitr)
opts_chunk$set(fig.path='figure/', fig.align='center', fig.pos='H',fig.width=5, fig.height=4)
@
\title{Centralne Twierdzenie Graniczne}
\author{Mikołaj Langner}
\date{2.3.2021}
\begin{document}
\maketitle
<<Define variables>>=
points <- seq(-4, 4, length.out=5000)
df = data.frame(points = points,
theoretical.pdf = dnorm(points),
theoretical.cdf = pnorm(points))
@
<<Generate from normal distribution using CLT>>=
clt.uniform <- Vectorize(function(N, min = 0, max = 1) {
S <- sum(runif(N, min = min, max = max))
Mean.S <- N * (max - min) / 2
StDev.S <- (max - min) * sqrt(N / 12)
return((S - Mean.S) / StDev.S)
})
@
<<Load libraries, warning=FALSE>>=
library(ggplot2)
library(gridExtra)
library(grid)
@
<<Compare theoretical and empirical distributions>>=
compare.distribution <- function(N) {
df$empirical.norm <- clt.uniform(rep(N, length(points)))
pdf.plot <- ggplot(df) +
geom_density(aes(empirical.norm, color="empiryczne")) +
geom_line(aes(x=points, y=theoretical.pdf, color="teoretyczne"), alpha=0.4) +
ggtitle("Gęstość") +
xlab("x") +
ylab("y") +
scale_color_manual(values = c(
'empiryczne' = 'darkblue',
'teoretyczne' = 'red')) +
labs(color = 'Dane')
cdf.plot <- ggplot(df) +
stat_ecdf(aes(empirical.norm), color="darkblue") +
geom_line(aes(x=points, y=theoretical.cdf), color="red", alpha=0.4) +
ggtitle("Dystrybuanta") +
xlab("x")
return(grid.arrange(cdf.plot, pdf.plot,
nrow=1,
widths=c(2.5, 4),
top=textGrob(sprintf("N = %s", N))))
}
@
<<Generate plots>>=
for (N in c(1, 5, 10, 50, 1000)) {
compare.distribution(N)
}
@
\end{document}
qexp(.01)
qexp(.5, .01)
sort(c(1,3,2))
a = sort(c(2,1,3))
a
a[2:3]
a[1:2]
a[1]
a[3]
sum(c(1, 2, 3, 4, 5)[2:4])
winsor.mean
install.packages("psych")
library(psych)
winsor(c(1, 2, 3, 4, 5), trim=.2)
winsor.mean(c(1, 2, 3, 4, 5), trim=.2)
winsor.mean(c(1, 2, 3, 4, 5), trim=.4)
winsor.mean(c(1, 2, 3, 4, 5), trim=.6)
winsor.mean(c(1, 2, 3, 4, 5, 7, 9, 11), trim=.4)
winsor.mean(c(1, 2, 3, 4, 5, 7, 9, 11), trim=.5)
winsor.mean(c(1, 2, 3, 4, 5, 7, 9, 11), trim=.51)
seq(0, 3 / 2)
seq(0, 3 / 2) / 3
seq(0, 11 / 2) / 11
max(1, 2)
max(1, 2, 3)
read.csv('churn.txt')
setwd("C:/Users/mikil/Desktop/studia/data_mining/lista_1")
read.csv('churn.txt')
df <- read.csv('churn.txt')
head(df)
sapply(df, class)
str(df)
sum(is.na(df))
head(df)
is.na(df)
str(df)
levels(df)
levels(df$State)
levels(Phone)
levels(df$Phone)
summary(df)
sapply(df, function(x) sum(is.na(x)))
is.factor(df)
sapply(df, is.factor)
df[1:10, sapply(df, is.factor)]
sapply(df[, sapply(df, is.factor)], levels)
drop
help(drop)
df <- subset(df, select=-Phone)
head(df)
sapply(df[, sapply(df, is.factor)], levels)
summary(df)
df <- read.csv('churn.txt')
df$Area.Code <- as.factor(df$Area.Code)
df$Day.Charge <- as.integer(df$Day.Charge)
df <- subset(df, select=-Phone)
numerics <- subset(df, select=-sapply(df, is.factor))
head(numerics)
head(subset(df, select=-sapply(df, is.factor)))
head(subset(df, select=sapply(df, is.factor)))
head(subset(df, select=-sapply(df, is.factor)))
help(subset)
c(1, 2, 3, 4, 5)[-1]
c(1, 2, 3, 4, 5)[-1, -2]
c(1, 2, 3, 4, 5)[c(-1, -2)]
c(1, 2, 3, 4, 5)[-c(1, 2)]
head(subset(df, select=-c(sapply(df, is.factor))))
head(subset(df, select=c(sapply(df, is.factor))))
head(subset(df, select=sapply(df, function(x) !is.factor(x))))
head(subset(df, select=sapply(df, !is.factor))
)
head(subset(df, select=sapply(df, !is.factor)))
head(subset(df, select=sapply(df, function(x) !is.factor(x))))
numerics <- subset(df, select=sapply(df, function(x) !is.factor(x)))
factors <- subset(df, select=sapply(df, is.factor(x)))
factors <- subset(df, select=sapply(df, is.factor))
head(factors)
head(numerics)
for i in 1:10 {}
for (i in 1:10) {}
for (i in 1:10) {
print(i)
}
str(numerics)
ggplot(numerics, aes(x=Day.Mins)) + geom_hist()
library(ggplot2)
ggplot(numerics, aes(x=Day.Mins)) + geom_hist()
ggplot(numerics, aes(x=Day.Mins)) + geom_histogram()
library(dplyr)
help(gather)
library(tidyr)
help("gather")
mtcars %>% gather()
df %>% gather()
numerics %>% gather
numerics %>% gather %>% head
ggplot(gather(numerics), aes(value)) + geom_histogram() + facet_wrap(~key)
ggplot(gather(numerics), aes(value)) + geom_histogram() + facet_wrap(~key, scales='free_x')
ggplot(gather(numerics), aes(value)) + geom_histogram() + facet_wrap(~key, scales='free_y')
ggplot(gather(numerics), aes(value)) + geom_histogram() + facet_wrap(~key, scales='free')
factors <- subset(df, select=sapply(df, is.factor(x)))
plotmatrix(numerics)
plotmatrix
ggpairs
library(GGally)
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
library(GGally)
head(numerics)
ggpairs
help(ggpairs)
help(GGally)
library(GGally)
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
library(GGally)
library(ggplot2)
ggplot(gather(numerics), aes(value)) + geom_histogram() + facet_wrap(~key, scales='free_y')
library("rlang", lib.loc="~/R/win-library/3.6")
install.packages("rlang")
install.packages("rlang")
install.packages(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
