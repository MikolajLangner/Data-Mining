summary(df)
sapply(df, function(x) sum(is.na(x)))
is.factor(df)
sapply(df, is.factor)
df[1:10, sapply(df, is.factor)]
sapply(df[, sapply(df, is.factor)], levels)
drop
help(drop)
df <- subset(df, select=-Phone)
head(df)
sapply(df[, sapply(df, is.factor)], levels)
summary(df)
df <- read.csv('churn.txt')
df$Area.Code <- as.factor(df$Area.Code)
df$Day.Charge <- as.integer(df$Day.Charge)
df <- subset(df, select=-Phone)
numerics <- subset(df, select=-sapply(df, is.factor))
head(numerics)
head(subset(df, select=-sapply(df, is.factor)))
head(subset(df, select=sapply(df, is.factor)))
head(subset(df, select=-sapply(df, is.factor)))
help(subset)
c(1, 2, 3, 4, 5)[-1]
c(1, 2, 3, 4, 5)[-1, -2]
c(1, 2, 3, 4, 5)[c(-1, -2)]
c(1, 2, 3, 4, 5)[-c(1, 2)]
head(subset(df, select=-c(sapply(df, is.factor))))
head(subset(df, select=c(sapply(df, is.factor))))
head(subset(df, select=sapply(df, function(x) !is.factor(x))))
head(subset(df, select=sapply(df, !is.factor))
)
head(subset(df, select=sapply(df, !is.factor)))
head(subset(df, select=sapply(df, function(x) !is.factor(x))))
numerics <- subset(df, select=sapply(df, function(x) !is.factor(x)))
factors <- subset(df, select=sapply(df, is.factor(x)))
factors <- subset(df, select=sapply(df, is.factor))
head(factors)
head(numerics)
for i in 1:10 {}
for (i in 1:10) {}
for (i in 1:10) {
print(i)
}
str(numerics)
ggplot(numerics, aes(x=Day.Mins)) + geom_hist()
library(ggplot2)
ggplot(numerics, aes(x=Day.Mins)) + geom_hist()
ggplot(numerics, aes(x=Day.Mins)) + geom_histogram()
library(dplyr)
help(gather)
library(tidyr)
help("gather")
mtcars %>% gather()
df %>% gather()
numerics %>% gather
numerics %>% gather %>% head
ggplot(gather(numerics), aes(value)) + geom_histogram() + facet_wrap(~key)
ggplot(gather(numerics), aes(value)) + geom_histogram() + facet_wrap(~key, scales='free_x')
ggplot(gather(numerics), aes(value)) + geom_histogram() + facet_wrap(~key, scales='free_y')
ggplot(gather(numerics), aes(value)) + geom_histogram() + facet_wrap(~key, scales='free')
factors <- subset(df, select=sapply(df, is.factor(x)))
plotmatrix(numerics)
plotmatrix
ggpairs
library(GGally)
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
library(GGally)
head(numerics)
ggpairs
help(ggpairs)
help(GGally)
library(GGally)
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
library(GGally)
library(ggplot2)
ggplot(gather(numerics), aes(value)) + geom_histogram() + facet_wrap(~key, scales='free_y')
library("rlang", lib.loc="~/R/win-library/3.6")
install.packages("rlang")
install.packages("rlang")
install.packages(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(ggplot2)
df = read.csv('churn.txt', stringsAsFactors = TRUE)
a = subset(df, select=c(Churn., Day.Mins))
View(a)
install.packages("ggmosaic")
library(plotly)
detach("package:plotly", unload = TRUE)
library(ggplot2)
install.packages("ggmosaic")
my_summary
my_summary <- function(x) {
statistics <- c(mean(x), quantile(x, 0.25), median(x), quantile(x, 0.75), IQR(x), min(x), max(x), var(x), sd(x), kurstosis(x), skewness(x))
names(statistics) <- c("mean", "Q1", "median", "Q3", "IQR", "min", "max", "Wariancja", "Odchylenie standardowe", "Kurtoza", "skosnosc")
return(statistics)
}
df
df = read.csv("churn.txt")
my_summary(df$Day.Mins)
apropos
apropos kurtosis
apropos(kurtosis)
Kurtosis
kurtosis
skewness
library(moments)
install.packages("moments")
library(moments)
skewness
my_summary(df$Day.Mins)
my_summary <- function(x) {
statistics <- c(mean(x), quantile(x, 0.25), median(x), quantile(x, 0.75), IQR(x), min(x), max(x), var(x), sd(x), kurtosis(x), skewness(x))
names(statistics) <- c("mean", "Q1", "median", "Q3", "IQR", "min", "max", "Wariancja", "Odchylenie standardowe", "Kurtoza", "skosnosc")
return(statistics)
}
my_summary(df$Day.Mins)
View(data.frame(df$Day.Mins))
View(data.frame(mmy_summary(df$Day.Mins))
)
View(data.frame(my_summary(df$Day.Mins)))
a = my_summary(df$Day.Mins)
a.names
names(a)
as.vector(a)
dim(as.vector(a))
dim(names(a))
dim(a)
a
View(data.frame(a))
as.vector(a)
length(as.vector(a))
matrix = c(as.vector(a))
matrix
dim(matrix)
install.packages("kableExtra")
a
a = summary(df$Day.Mins)
dim(a)
names(a)
dim(a)
names <- names(summary(df$Day.Mins))
as.vector(names)
as.matrix(a)
as.matrix(names)
data.frame(summary(df$Day.Mins))
as.matrix(summary(df$Day.Mins))
xtable(as.matrix(summary(df$Day.Mins)))
library(knitr)
xtable(as.matrix(summary(df$Day.Mins)))
library(xtable)
xtable(as.matrix(summary(df$Day.Mins)))
xtable(as.matrix(summary(df$Day.Mins))')
)
))
)))))
""
''
xtable(t(as.matrix(summary(df$Day.Mins))))
summary_matrix = t(as.matrix(my_summary(df$Day.Mins)))
tab2 <- xtable(summary_matrix, caption = , label = "tab:tabela2")
print(tab2, type = "latex", table.placement = "H")
nazwy.wskaznikow <- names(my_summary(df$Day.Mins))
nazwy.zmiennych <- c("CustServ.Calls", "Day.Mins", "Eve.Mins")
CustServ.Calls.summary <- as.vector(my_summary(df$CustServ.Calls))
Day.Mins.summary <- as.vector(my_summary(df$Day.Mins))
Eve.Mins.summary <- as.vector(my_summary(df$Eve.Mins))
summary.matrix <- rbind(CustServ.Calls.summary, Day.Mins.summary, Eve.Mins.summary)
row.names(summary.matrix) <- nazwy.zmiennych
colnames(summary.matrix) <- nazwy.wskaznikow
a = data.frame(summary.matrix)
View(a)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
numerics <- subset(df, select=sapply(df, function(x) !is.factor(x)))
numerics <- data.frame(numerics, Churn. = df$Churn.)
numerics <- subset(numerics, select=-c(Day.Charge, Eve.Charge, Night.Charge, Intl.Charge))
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
c(feature, ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")])
}
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)
library(EnvStats)
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)
library(DescTools)
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
c(feature, ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")])
}
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)
library(ggplot2)
library(ggmosaic)
library(GGally)
library(tidyr)
library(dplyr)
library(EnvStats)
library(DescTools)
library(moments)
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
c(feature, ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")])
}
ks.test
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)
lapply(churn.kstest, colnames(subset(numerics, select=-Churn.)))
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)
sapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)
sapply(colnames(subset(numerics, select=-Churn.)), sum)
sapply(df, class)
sapply(df, churn.kstest)
sapply(numerics, churn.kstest)
sapply(subset(numerics, select=-Churn.), churn.kstest)
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest())
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest
)
# Chunk 1: Globals
library(knitr)
library(xtable)
library(kableExtra)
opts_chunk$set(fig.path='figure/', fig.align='center', fig.pos='H',fig.width=5, fig.height=4)
# Chunk 2: Load and view data
df <- read.csv('churn.txt', stringsAsFactors = TRUE)
df$Area.Code = as.factor(df$Area.Code)
# Area.Code powinnien być zmienną jakościową
# Chunk 3: rozmiar danych
dim(df)
# Chunk 4: tabela_1
table1 <- data.frame(sapply(df, class))
colnames(table1) <- c("Typ zmiennej")
tab1 <- xtable(table1, caption = "Hello", label = "tab:tabela1")
print(tab1, type = "latex", table.placement = "H")
# Chunk 5: brakujące dane
sum(sapply(df, function(x) sum(is.na(x))))
# Chunk 6: Delete `Phone` column
df <- subset(df, select=-Phone)
# Chunk 7: Import libraries
# wczytanie potrzebnych bibliotek
library(ggplot2)
library(ggmosaic)
library(GGally)
library(tidyr)
library(dplyr)
library(EnvStats)
library(DescTools)
library(moments)
# Chunk 8: Split data by numerics and factors
factors <- subset(df, select=sapply(df, is.factor))
numerics <- subset(df, select=sapply(df, function(x) !is.factor(x)))
# Chunk 9: Add grouping category to numerics
numerics <- data.frame(numerics, Churn. = df$Churn.)
# Chunk 10: Pair plot for continuous variables
continuous <- subset(numerics, select=sapply(numerics, function(x) !is.integer(x)))
ggpairs(continuous,
lower=list(continuous=wrap("points", alpha=.4, size=.01)))
# Chunk 11: Drop .Charhe variables
numerics <- subset(numerics, select=-c(Day.Charge, Eve.Charge, Night.Charge, Intl.Charge))
# Chunk 12: Overviews plots grouped
ggplot(gather(factors, "key", "value", -Churn.), aes(value, fill=Churn.)) +
geom_bar(position="fill") +
facet_wrap(~key, scales='free')
ggplot(gather(numerics, "key", "value", -Churn.), aes(x=value, color=Churn.)) +
geom_freqpoly(aes(y=..density..), position="identity") +
facet_wrap(~key, scales='free')
ggplot(gather(numerics, "key", "value", -Churn.), aes(value, color=Churn.)) +
geom_boxplot(aes(x=value)) +
facet_wrap(~key, scales='free')
ggplot(gather(numerics, "key", "value", -Churn.), aes(value, color=Churn.)) +
stat_ecdf() +
facet_wrap(~key, scales='free')
# Chunk 13: kstest
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
c(feature, ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")])
}
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)
# Chunk 14: nowy podzbiór danych
important <- subset(df, select=c(CustServ.Calls, Day.Mins, Eve.Mins, Int.l.Plan,
VMail.Plan, Churn.))
# Chunk 15: funkcja do wyznaczania statystyk opisowych
# własna funkcja zwracająca wskaźniki sumaryczne
my_summary <- function(x) {
statistics <- c(mean(x), quantile(x, 0.25), median(x), quantile(x, 0.75),
IQR(x), min(x), max(x), var(x), sd(x), kurtosis(x), skewness(x))
names(statistics) <- c("Srednia", "Q1", "Mediana", "Q3", "IQR", "Min", "Max",
"Wariancja", "Odchylenie standardowe", "Kurtoza", "Skosność")
return(statistics)
}
# Chunk 16: tabela_2
nazwy.wskaznikow <- names(my_summary(df$Day.Mins))
nazwy.zmiennych <- c("CustServ.Calls", "Day.Mins", "Eve.Mins")
CustServ.Calls.summary <- as.vector(my_summary(df$CustServ.Calls))
Day.Mins.summary <- as.vector(my_summary(df$Day.Mins))
Eve.Mins.summary <- as.vector(my_summary(df$Eve.Mins))
summary.matrix <- rbind(CustServ.Calls.summary, Day.Mins.summary, Eve.Mins.summary)
row.names(summary.matrix) <- nazwy.zmiennych
colnames(summary.matrix) <- nazwy.wskaznikow
summary.matrix %>% kbl(caption="Wskaźniki sumaryczne dla wybranych zmiennych", format="latex") %>% kable_styling(latex_options=c('hold_position', 'scale_down'))
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)
data.frame(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest))
View(data.frame(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)))
names <- colnames(subset(numerics, select=-Churn.))
names
sapply(names, churn.kstest)
names(sapply(names, churn.kstest))
names(-1)
names
names(2)
names[2]
names[-1]
sappply(sapply(names, churn.kstest), [-1])
last <- function(x) {}
last <- function(x) {}
last <- function(x) {
return(x[-1])
}
sappply(sapply(names, churn.kstest), last)
sapply(sapply(names, churn.kstest), last)
sapply(names, churn.kstest)
data.frame(sapply(names, churn.kstest))
a = data.frame(sapply(names, churn.kstest))
a
View(a)
numerics[Day.Calls]
numerics['Day.Calls]
''
''
numerics['Day.Calls']
numerics[['Day.Calls']]
<<kstest, warning=FALSE>>=
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
c(feature, ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")])
}
numerics
churn.kstest('Day.Calls')
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
c(ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")])
}
churn.kstest('Day.Calls')
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)
View(data.frame(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)))
df
a = 2
a
c(ks.test(yes[[feature]], no[[feature]])
}
View(data.frame(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)))
names <- as.vector(colnames(df))
}
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
c(ks.test(yes[[feature]], no[[feature]]))
}
View(data.frame(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)))
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
c(ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")])
}
View(data.frame(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)))
new_df = data.frame("Zmienne" = names)
View(new_df)
churn.kstest("Days.Calls")
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
c(ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")])
}
churn.kstest("Days.Calls")
churn.kstest("Days.Mins")
churn.kstest("Day.Mins")
class(churn.kstest("Day.Mins"))
a = churn.kstest("Day.Mins")
a[1]
a[2]
a[2]+1
a = churn.kstest("Day.Mins").statistic
a = statistic(churn.kstest("Day.Mins"))
View(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest))
View(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest))
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
c(feature, ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")])
}
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)
View(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest))
View(data.frame(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)))
class(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest))
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)[1]
new_df = data.fram()
new_df = data.frame()
for (i in lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)) {
cbind(new_df, i)
}
new_df
cbind(new_df, c(1, 2, 3))
cbind(new_df, data.frame(c(1, 2, 3)))
new_df = data.frame(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)[1])
new_df
View(new_df)
lapply(matrix(colnames(subset(numerics, select=-Churn.))), churn.kstest)
a = lapply(matrix(colnames(subset(numerics, select=-Churn.))), churn.kstest)
a
View(a)
data.frame(a)
View(data.frame(a))
n = data.frame(x=c(1,2, 3))
View(n)
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)[1]
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)[1][1]
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)[1][2]
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)[1][1]
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
return(c(feature, ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")]))
}
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)[1][1]
lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)[1][2]
as.vector(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)[1])
t = as.vector(lapply(colnames(subset(numerics, select=-Churn.)), churn.kstest)[1])
t[1]
t[2]
churn.kstest('Day.Calls')
a = churn.kstest('Day.Calls')
a[1]
a[2]
a[3]
data = data.frame(x=c(1, 2))
View(data)
for i in colnames(subset(numerics, select=-Churn.)) {
data[i] = ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")]
}
for i in colnames(subset(numerics, select=-Churn.)) {
data[i] = ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")]
}
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
return(c(feature, ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")]))
}
data = data.frame(x=c(1, 2))
View(data)
for i in colnames(subset(numerics, select=-Churn.)) {
data[i] = ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")]
}
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
return(c(feature, ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")]))
}
data = data.frame(x=c(1, 2))
View(data)
for (i in colnames(subset(numerics, select=-Churn.))) {
data[i] = ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")]
}
churn.kstest <- function(feature) {
yes <- subset(numerics, subset=Churn.=="True.")
no <- subset(numerics, subset=Churn.=="False.")
return(c(feature, ks.test(yes[[feature]], no[[feature]])[c("statistic", "p.value")]))
}
data = data.frame(x=c(1, 2))
View(data)
for (i in colnames(subset(numerics, select=-Churn.))) {
data[i] = ks.test(yes[[i]], no[[i]])[c("statistic", "p.value")]
}
for (i in colnames(subset(numerics, select=-Churn.))) {
data[i] = ks.test(yes[[i]], no[[i]])[c("statistic", "p.value")]
}
churn.kstest('Days.Mins')
churn.kstest('Day.Mins')
a = churn.kstest('Day.Mins')
a[2]
a[2:3]
a[3]
a[2]
r = c(ks.test(yes[['Day.Mins']], no[['Day.Mins']])[c("statistic", "p.value")])
r
r[1]
r[2]
r[1][1]
r[1][2]
as.numeric(r[1])
as.numeric(churn.kstest('Day.Mins')[1])
churn.kstest('Day.Mins')[1]
churn.kstest('Days.Mins')
churn.kstest('Day.Mins')
churn.kstest('Day.Mins')[2:3]
as.numeric(churn.kstest('Day.Mins')[2:3])
as.numeric(churn.kstest('Day.Mins')[2:3])[1]
as.numeric(churn.kstest('Day.Mins')[2:3])[2]
y = data.frame(sapply(df, class))
View(y)
t(y)
View(t(y))
